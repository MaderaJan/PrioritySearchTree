TIME COMPLEXITY ================================================================

buildTree: is O(n) for each recursive call because it iterates over
           every input point.  The depth of recursive calls is worst
           case the depth of the tree, which is equal to logn.
           Therefore, buildTree is O(nlogn).

findAllPointsWithin: is O(1) for each recursive call. The depth of
                     recursive calls is again equal to the depth of
                     the tree, and therefore findAllPointsWithin is
                     O(logn).
                     
                     Intuitively, this seems O(n) because in the worst
                     case it will traverse every node.

minY: is O(1) because the minimum Y value of a non-null tree is always
      the root node which can be retrieved in constant time.

minX: is O(logn) because it has to traverse at most the depth of the
      tree (logn) along the left side.

maxX: same as minX but along the right side.

maxY: is O(logn) because each recursive call is O(1), and the depth of
      the recursion is at most O(logn).
      
      Intuitively, this seems O(n) because in the worst case it will
      traverse every node.

SPACE COMPLEXITY ===============================================================

This seems quite clearly O(n).  The algorithm will allocate enough
space for a perfect binary tree even if there are null leafs.  This
wastes some space, but in the worst case only one less than the width
of the tree at its maximum depth.

